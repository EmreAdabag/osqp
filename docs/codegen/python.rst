Python
======

Before generating code for a parametric problem, the problem should be first
specified in the setup phase. See :ref:`python_setup` for more details.


Codegen
-------
The code is generated by running

.. code:: python

    m.codegen(folder, **opts)

The argument :code:`folder` is the name of a directory where the generated
code is stored.
Additional codegen options are shown in the following table

+-------------------------------+---------------------------------------------------+--------------------------------+
| Option                        | Description                                       | Allowed values                 |
+===============================+===================================================+================================+
| :code:`parameters`            | Problem parameters                                | | :code:`'vectors'` (default)  |
|                               |                                                   | | :code:`'matrices'`           |
+-------------------------------+---------------------------------------------------+--------------------------------+
| :code:`prefix`                | | Prefix for filenames and C variables.           | | :code:`` (default)           |
|                               | | Useful if generating multiple problems.         | |                              |
+-------------------------------+---------------------------------------------------+--------------------------------+
| :code:`extension_name`        | | Name of the generated Python module.            | | :code:`'emosqp'` (default)   |
|                               | | :code:`None` to skip Python module generation.  | | string or None               |
+-------------------------------+---------------------------------------------------+--------------------------------+
| :code:`force_rewrite`         | Rewrite existing directory                        | | :code:`False` (default)      |
|                               |                                                   | | :code:`True`                 |
+-------------------------------+---------------------------------------------------+--------------------------------+
| :code:`use_float`             | Use :code:`float` type instead of :code:`double`  | | :code:`False` (default)      |
|                               |                                                   | | :code:`True`                 |
+-------------------------------+---------------------------------------------------+--------------------------------+
| :code:`printing_enable`       | Enable solver printing                            | | :code:`False` (default)      |
|                               |                                                   | | :code:`True`                 |
+-------------------------------+---------------------------------------------------+--------------------------------+
| :code:`profiling_enable`      | Enable solver profiling                           | | :code:`False` (default)      |
|                               |                                                   | | :code:`True`                 |
+-------------------------------+---------------------------------------------------+--------------------------------+
| :code:`interrupt_enable`      | Enable user interrupt (Ctrl-C)                    | | :code:`False` (default)      |
|                               |                                                   | | :code:`True`                 |
+-------------------------------+---------------------------------------------------+--------------------------------+
| :code:`include_codegen_src`   | | Include headers/sources/Makefile in the         | | :code:`True` (default)       |
|                               | output folder.                                    | |                              |
|                               | | Required :code:`True` if                        | |                              |
|                               | :code:`extension_name` is specified.              | | :code:`False`                |
+-------------------------------+---------------------------------------------------+--------------------------------+
| :code:`compile`               | | Whether to compile the extension.               | | :code:`False` (default)      |
|                               | | This allows:code:`import <extension_name>`      | | :code:`True`                 |
+-------------------------------+---------------------------------------------------+--------------------------------+

The options are passed using named arguments, e.g.,

.. code:: python

    m.codegen('code', parameters='matrices', extension_name='emosqp')


Extension module API
--------------------
Once the code is generated, you can import a light python wrapper with

.. code:: python

    import emosqp

where :code:`emosqp` is the extension name given in the previous section. The module imports the following functions

.. py:function:: solve()
   :noindex:

   Solve the problem.

   :returns: tuple (x, y, status_val, iter, run_time)

             - **x** (*ndarray*) - Primal solution
             - **y** (*ndarray*) - Dual solution
             - **status_val** (*int*) - Status value as in :ref:`status_values`
             - **iter** (*int*) - Number of iterations
             - **run_time** (*double*) - Run time





.. py:function:: update_data_vec(q, l, u)
   :noindex:

   Update linear cost/lower bound/upper bound

   :param ndarray q: New linear cost vector. :code:`None` if you do not wish to update :code:`q`.
   :param ndarray l: New lower bound vector. :code:`None` if you do not wish to update :code:`l`.
   :param ndarray u: New upper bound vector. :code:`None` if you do not wish to update :code:`u`.


If the code is generated with the option :code:`parameters` set to
:code:`'matrices'`, the following functions are also provided


.. py:function:: update_data_mat(P_x, P_i, A_x, A_i)
  :noindex:

  Update nonzero entries of the quadratic cost matrix (only upper triangular) without changing sparsity structure.

  :param ndarray P_x: Values of entries in P to be updated. Pass :code:`None` if not updating P.
  :param ndarray P_i: Indices of entries in P to be updated. Pass :code:`None` if
                         all the P indices are to be updated.
  :param ndarray A_x: Values of entries in A to be updated. Pass :code:`None` if not updating A.
  :param ndarray A_i: Indices of entries in A to be updated. Pass :code:`None` if
                         all the A indices are to be updated.